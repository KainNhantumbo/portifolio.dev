<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://codenut-dev.vercel.app</id>
    <title>Codenut.dev Feed</title>
    <updated>2023-11-09T21:06:49.954Z</updated>
    <generator>Feed for Kain's Blog and Portfolio Website</generator>
    <author>
        <name>Kain Nhantumbo</name>
        <email>nhantumbok@gmail.com</email>
        <uri>https://codenut-dev.vercel.app</uri>
    </author>
    <link rel="alternate" href="https://codenut-dev.vercel.app"/>
    <link rel="self" href="https://codenut-dev.vercel.app/blog/rss/feed.en.xml"/>
    <subtitle>Kain's Blog and Portfolio Website</subtitle>
    <icon>https://codenut-dev.vercel.app/favicon.png</icon>
    <rights>Copyright © 2023 Codenut.dev - All rights reserved.</rights>
    <entry>
        <title type="html"><![CDATA[How to Generate Random Colors in Javascript]]></title>
        <id>https://codenut-dev.vercel.app/blog/post/how-to-generate-colors-in-javascript</id>
        <link href="https://codenut-dev.vercel.app/blog/post/how-to-generate-colors-in-javascript"/>
        <updated>2022-09-20T12:10:18.366Z</updated>
        <summary type="html"><![CDATA[<p>Learn how to generate colors in javascript programatically</p>
]]></summary>
        <content type="html"><![CDATA[<p>In this post, I will write a  quick guide to build a simple hexadecimal color generator with javascript, so you can use it in your projects.</p>
<p>Without much, let&#39;s begin.</p>
<h3>Generating the colors</h3>
<p>First, we have to create an array of hexadecimal caracters like this:</p>
<pre><code class="language-js">const charactersArray = [0,1,2,3,4,5,6,7,8,9,&quot;A&quot;,&quot;B&quot;,&quot;C&quot;,&quot;D&quot;,&quot;E&quot;,&quot;F&quot;]
</code></pre>
<p>Putting those characters in an array will simplify the process, thats why I have picked an array to allow us to select any item by providing its index.</p>
<p>Then, let&#39;s create a function to select items from the array we created:</p>
<pre><code class="language-js">// function that takes a index and returns an integer.
function getHexCharacter(index) {
  return charactersArray[index];
}
</code></pre>
<p>The function above will take the index and return the hexademical-character stored in that place. Next, we need to represent colors using the returned value.</p>
<pre><code class="language-js">function generateColor() {
  const hexColorCode = &#39;#&#39;; // initial hex color code

  // iterate over the 6 possible aditional characters for the color code
  for (const i = 0; i &lt; 6; i++) {
    const randomIndex = Math.floor(Math.random() * charactersArray.length);
    hexColorCode += getHexCharacter(randomIndex);
  }
  return hexColorCode;
}
</code></pre>
<p>The above function, loops 6 times because hexadecimal colors are represented by 6 hexadecimal digits. Within the loop, the function calls <code>getHexCharacter()</code> to generate a hexadecimal digit for each index of the color code. </p>
<p>The function <code>getHexCharacter()</code> takes the <code>randomIndex</code> generated from the array of characters we have created before as parameter to ensure that we not have te same generated calor code values. Once all digits of the color code have been generated, the function <code>generateColor()</code>  returns the complete hexadecimal color code represented as a string.</p>
<p>That&#39;s it. I hope you could learn something new today.
Thank you for reading! </p>
]]></content>
        <author>
            <name>Kain Nhantumbo</name>
            <email>nhantumbok@gmail.com</email>
            <uri>https://codenut-dev.vercel.app</uri>
        </author>
        <category label="Javascript"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Why Semantic Markup is Significant for Your Website Optimization]]></title>
        <id>https://codenut-dev.vercel.app/blog/post/Why-Semantic-Markup-is-Significant-for-Your-Website-optimization</id>
        <link href="https://codenut-dev.vercel.app/blog/post/Why-Semantic-Markup-is-Significant-for-Your-Website-optimization"/>
        <updated>2022-09-11T12:10:18.366Z</updated>
        <summary type="html"><![CDATA[<p>We should discuss why semantic markup (HTML) is significant for your sites Search engine optimization, and that it is so easy to get this pivotal Website design enhancement component right, even as a non-geek.</p>
]]></summary>
        <content type="html"><![CDATA[<p>The vast majority have caught wind of Website design enhancement (Site improvement) and realize that it&#39;s something that your site should be found by means of the Web crawler Results Pages (SERPs). On the off chance that you know somewhat more than that you might know that &quot;catchphrases&quot; are one of the main components of Website optimization. You&#39;ll comprehend the reason why semantic markup is so significant for your catchphrases in a second.</p>
<p>What loads of site proprietors have close to zero insight into Web optimization, is that the HTML components that your site is organized (increased) with will straightforwardly impact the web crawlers (Google, Bing, Yippee) capacity to output, record, and find out about how applicable your site is to the end-client (the people who look for things).</p>
<p>HTML (Hypertext Markup Language) has many inherent labels that web engineers use to make components on a page. A component comprises of:</p>
<ul>
<li>An opening HTML tag;</li>
<li>Content;</li>
<li>A closing HTML tag.</li>
</ul>
<p>The opening and shutting HTML labels fold over your substance and characterize a HTML component.</p>
<p>So a HTML component is: (opening tag) - content - (closing tag).</p>
<p>Content can be things like titles, sections, records, joins, buttons, pictures, buttons, and significantly more. Here is an illustration of a passage component:</p>
<p>The very text you&#39;re perusing right presently is a section component. It sits inside an initial passage tag <code>&lt;p&gt;</code> and an end section tag <code>&lt;/p&gt;</code>.</p>
<p>To affirm that the assertion above is valid, just right snap straightforwardly on the passage (or some other block of message in this article) and snap Examine.</p>
<p>To utilize Semantic markup essentially implies that you utilize the proper underlying HTML labels to fold over your substance so they address your substance best.</p>
<p>As an example, this tutorial you’re reading has a title called &quot;Why Semantic Markup is Significant for Your Web optimization&quot;. The title is wrapped by an opening and shutting <code>&lt;h1&gt;</code> tag (check for yourself). H1 labels are utilized to characterize the greatest text on a page, for example, titles or article titles.</p>
<p>The Web search tool artificial intelligence (bots) are wired to search for pertinent examples that propose that your specific article or item page is applicable to their searchers. The title is one of the main signs since it&#39;s the single greatest starter (or super short synopsis) for your substance that you use to convince searchers to tap on the connection to consume your substance.</p>
<h2>What isn&#39;t semantic markup?</h2>
<p>I&#39;ll clarify this with an outrageous example for drive the point across quick. The HTML language has a tag for characterizing button components named <code>&lt;button&gt;</code>, for example:</p>
<pre><code class="language-html">&lt;button&gt;Like and Subscribe&lt;/button&gt;
</code></pre>
<p>The above results in an un-styled button, yet it utilizes right semantic markup.</p>
<p>In any case, suppose that I need to be amusing, and on second thought wrap the substance above (Like and Subscribe) inside section labels <code>&lt;p&gt;</code>Like and Subscribe<code>&lt;/p&gt;</code>.</p>
<p>In addition to the fact that it be semantically would wrong, yet it likewise wouldn&#39;t work actually, in light of the fact that section components are not interactive in the browser.</p>
<h2>Unsemanic markup</h2>
<p>There are a couple of ways you can markup your substance un-semantically, that won&#39;t destroy your site&#39;s specialized elements, in contrast to the earlier model.</p>
<p>Suppose you wrap your article&#39;s title inside section labels rather than the suitable H1 tag. This is semantically wrong since well, a title isn&#39;t a passage. Be that as it may, in fact it won&#39;t seriously hurt your site. Guests can in any case peruse the text.</p>
<p>You can contend that visual styling is a specialized component of your site, and all things considered, enclosing a title by a section label will to some degree hurt your site in fact, as in your title will have a more modest text dimension and textual style weight than it ought to (on the grounds that passage is dependably more modest than headings).</p>
<h2>Conventional and unsemanic markup</h2>
<p>You could likewise wrap a section inside one of HTML&#39;s conventional HTML labels for example the exemplary <code>&lt;div&gt;</code> tag. Utilizing a <code>&lt;div&gt;</code> to fold over a passage or title, or other text, would be semantically wrong, however it will not obliterate your site&#39;s specialized highlights. Your site will in any case work, yet very much like with the heading/section model over, it will play with your typography (text organizing).</p>
<p>Involving some unacceptable markup for your substance is an incredible method for letting web search tools like Google realize that you don&#39;t have the foggiest idea what in the world you&#39;re doing, and this will straightforwardly hurt your capacity to rank high on the query items pages (SERPs).</p>
<p>SEO-friendly HTML markup is simple, here’s a quick checklist:</p>
<ul>
<li>Headlines should be defined with <code>&lt;h1&gt;</code> tags — only one per page.</li>
<li>Subheadlines should be define with <code>&lt;h2&gt;</code>, <code>&lt;h3&gt;</code>, or <code>&lt;h4&gt;</code> tags. You can also use <code>&lt;h5&gt;</code> and <code>&lt;h6&gt;</code> but I generally recommend against going overboard with heading tags (it won’t give you more SEO).</li>
<li>Paragraphs should be defined with <code>&lt;p&gt;</code></li>
<li>Lists should be defined with <code>&lt;ul&gt;</code></li>
<li>List items should be defined with <code>&lt;li&gt;</code> and always sit inside <code>&lt;ul&gt;</code> tags.</li>
</ul>
<p>Remember that to use Semantic markup simply means that you are using the appropriate built-in HTML tags to wrap around your content so that they represent your content best.</p>
]]></content>
        <author>
            <name>Kain Nhantumbo</name>
            <email>nhantumbok@gmail.com</email>
            <uri>https://codenut-dev.vercel.app</uri>
        </author>
        <category label="Web Development"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[How to Make Pre Tags Responsive in CSS]]></title>
        <id>https://codenut-dev.vercel.app/blog/post/How-to-Make-Pre-Tags-Responsive-in-CSS</id>
        <link href="https://codenut-dev.vercel.app/blog/post/How-to-Make-Pre-Tags-Responsive-in-CSS"/>
        <updated>2022-09-10T15:10:18.366Z</updated>
        <summary type="html"><![CDATA[<p>Learn how to make your HTML pre tags responsive by adding a couple of CSS properties</p>
]]></summary>
        <content type="html"><![CDATA[<p>When I was building this site, I had a hard time styling the <code>pre</code> tags. That problem lead long code snippets (which are wrapped by <code>pre</code> tags) to overflow the width of the page, and cause the page layout to break. So I decided to share the solution I found and that worked for me.</p>
<p>I found that happens because by default <code>pre</code> tags have the CSS <code>white-space</code> property set to <code>normal</code>, like this:</p>
<pre><code class="language-css">pre {
    white-space: normal;
}
</code></pre>
<p>To fix the issue you simple change <code>normal</code> property to <code>pre-wrap</code>:</p>
<pre><code class="language-css">pre {
    white-space: pre-wrap;
}
</code></pre>
<p>This will improve the appearance, but doesn’t solve the overflow issue completely, because <code>pre-wrap</code> only addresses whole lines of code (a collection of code terms on a line, separated by white space).</p>
<p>What happens if individual words in your code lines are so long that they go beyond the width of your page?</p>
<p>Then your layout still breaks, because <code>pre-wrap</code> doesn’t address individual words.</p>
<p>To fix this issue, we need to add another CSS properties to the <code>pre</code> tag, called <code>word-break</code> then assign a value of <code>break-all</code> and <code>word-wrap</code> property then assign a value of <code>break-word</code>. Like this:</p>
<pre><code class="language-css">pre {
    white-space: pre-wrap;
    word-break: break-all;
  word-wrap: break-word;
}
</code></pre>
<p>Now your <code>pre</code> tags should be responsive. I hope this article helped you.</p>
]]></content>
        <author>
            <name>Kain Nhantumbo</name>
            <email>nhantumbok@gmail.com</email>
            <uri>https://codenut-dev.vercel.app</uri>
        </author>
        <category label="CSS"/>
    </entry>
</feed>