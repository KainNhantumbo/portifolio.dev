<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://codenut-dev.vercel.app</id>
    <title>Codenut.dev Feed</title>
    <updated>2024-01-24T00:01:56.873Z</updated>
    <generator>Feed for Kain's Blog and Portfolio Website</generator>
    <author>
        <name>Kain Nhantumbo</name>
        <email>nhantumbok@gmail.com</email>
        <uri>https://codenut-dev.vercel.app</uri>
    </author>
    <link rel="alternate" href="https://codenut-dev.vercel.app"/>
    <link rel="self" href="https://codenut-dev.vercel.app/blog/rss/feed.en.xml"/>
    <subtitle>Kain's Blog and Portfolio Website</subtitle>
    <icon>https://codenut-dev.vercel.app/favicon.png</icon>
    <rights>Copyright © 2024 Codenut.dev - All rights reserved.</rights>
    <entry>
        <title type="html"><![CDATA[Use SERVE Package to Serve Locally Your Front-end Applications]]></title>
        <id>https://codenut-dev.vercel.app/blog/post/use-serve-package-to-serve-locally-your-react-apps</id>
        <link href="https://codenut-dev.vercel.app/blog/post/use-serve-package-to-serve-locally-your-react-apps"/>
        <updated>2023-11-27T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>Vercel has a pretty useful package called serve, that can be very handy to test and preview your local applications build</p>
]]></summary>
        <content type="html"><![CDATA[<p>In this small post, I will talk about a little NPM Package I use to preview builds before deploying my apps.</p>
<p>Without much, let&#39;s quick dive into this...</p>
<p>Some times you are trying out a new application with some HTML and you realize that to run your app, you need to have a server. With this package you don&#39;t have to always to get into the process of setting a simple HTTP server to able to run your application.</p>
<p>Now if you are only going to work with HTML files and don’t really have to connect to a database then this is a quick and easy solution rather than setting up a web server using various tools.</p>
<p><code>serve</code> is a NPM package that converts our current working directory into an virtual directory i.e. the directory is hosted under localhost.</p>
<p>Assuming Node is pre-installed on your local machine, you can open the terminal and install <code>serve</code> globally:</p>
<pre><code class="language-bash">npm install --global serve
</code></pre>
<p>You can now navigate to the directory were your application files are located and hit <code>serve .</code> on your terminal. Thats it now your local directory is being hosted on localhost.</p>
<p>The default port is <code>3000</code> but you can specify the port using the below command:</p>
<pre><code class="language-bash">serve .  -p [port_number]
</code></pre>
<p>Now, open your browser and type localhost:[port_number] to access your hosted application.</p>
<p>Don&#39;t forget too refer to the official documentation or type <code>serve -h</code> to show the available command options.</p>
<p>You can find the <code>serve</code> package on NPM <a href="https://www.npmjs.com/package/serve">here</a>.</p>
<p>Thanks for reading!</p>
]]></content>
        <author>
            <name>Kain Nhantumbo</name>
            <email>nhantumbok@gmail.com</email>
            <uri>https://codenut-dev.vercel.app</uri>
        </author>
        <category label="Front-end"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Schema Validation with Zod and Express.js]]></title>
        <id>https://codenut-dev.vercel.app/blog/post/schema-validation-with-zod-and-expressjs</id>
        <link href="https://codenut-dev.vercel.app/blog/post/schema-validation-with-zod-and-expressjs"/>
        <updated>2023-11-09T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>They say “Never trust user input” - I know that this may sound extreme, but it is an important security principle in programming. Today, we will learn togheter how to implement Zod in a Express.js application.</p>
]]></summary>
        <content type="html"><![CDATA[<p>This article will explain the concept of schema validation, explore the features of Zod, and demonstrate Zod validation, and its usage to ensure robust data integrity in Express applications.</p>
<p>Proper schema validation can help to prevent errors, improve performance, and ensure data security.</p>
<h2>Understanding schema validation</h2>
<p><strong>Schema validation</strong> is the process of verifying that incoming data conforms to a set of predefined rules or specifications, known as a schema.This is used to ensure the quality of data, to prevent errors, and to improve the performance of applications. So, validation is particularly crucial when dealing with user inputs, API responses, or any external data source and typically encompass a range of criteria, like as shown below:</p>
<ul>
<li>Data types: Specifying the expected type of data, such as strings, numbers, booleans, arrays, objects, etc.</li>
<li>Format constraints: Defining rules for the format of data, such as valid email addresses, phone numbers, dates, and more.</li>
<li>Structure: Ensuring the correct structure of nested objects, arrays, and their respective properties.</li>
<li>Validation conditions: Specifying conditions under which data is considered valid or invalid.</li>
</ul>
<h2>The need for validation library</h2>
<h3>What is Zod?</h3>
<p><strong>Zod</strong> is, according to its documentation, a TypeScript-first schema declaration and validation library, Created by Colin McDonnell. Unlike Yup, Zod is TypeScript-first which means it has a lot of features for TypeScript developers.</p>
<p>Zod comes with some really great features like:</p>
<ul>
<li>Works in Node.js and browsers (including IE 11)</li>
<li>Zero dependencies</li>
<li>Works with JavaScript too</li>
<li>Static type inference: Zod can automatically infer the TypeScript type of a data structure based on its schema.</li>
</ul>
<p>Zod provides a declarative way to define and validate data schemas using a clean and intuitive syntax. Zod is heavily influenced by TypeScript’s type system, which makes it particularly appealing to TypeScript developers.</p>
<h3>Why do we need Zod?</h3>
<p>Some developers might reason, Why we need Zod when we are already using Typescript. Well, Typescript helps with static type checking, but it only does this at compile time. After the build process, the type safety of Typescript disappears and Zod solves this problem.</p>
<p>With Zod, you can create a schema and use it to verify form inputs and user input at runtime.</p>
<h2>Why do we need to validate API Calls?</h2>
<p>API Calls validation helps you getting the right data that you want. For example, you want your users to have a strong password(e.g. at least 6 characters), you can use something like Zod or Yup and prevent users from entering a short password(less than 6 characters). Also, doing validation on the server makes your server much more secure, because no one can open the developer tools, go through your code and figure out how to beat your validation.</p>
<p><strong><em>Let&#39;s dive in with a pratical examples:</em></strong></p>
<p>First, go and create an empty directory and navigate into it:</p>
<pre><code class="language-bash">mkdir schema-validation-with-zod-and-expressjs
cd schema-validation-with-zod-and-expressjs
</code></pre>
<p>Then, initialize a Node.js project and add the necessary dependencies:</p>
<pre><code class="language-bash">npm init -y
npm install express zod
</code></pre>
<p>Next, add the following script to our <code>package.json</code> file.</p>
<pre><code class="language-json">{
  // ...
  &quot;scripts&quot;: {
    &quot;dev&quot;: &quot;node app.js&quot;
  }
  // ...
}
</code></pre>
<p>Now let&#39;s start an Express.js server.
Create a file called <code>app.js</code> at the root of the project:</p>
<pre><code class="language-js">const express = require(&#39;express&#39;);

const app = express();

app.use(express.json());

app.listen(8080, () =&gt; console.log(`Ready on http://localhost:${8080}`));
</code></pre>
<p>Then run the Express.js server (you can access it at <a href="http://localhost:8080">http://localhost:8080</a>).</p>
<pre><code class="language-bash">npm run dev
</code></pre>
<p>Next, we can start working with Zod.
Let&#39;s first import <code>z</code> from <code>zod</code> and add a simple login schema.</p>
<pre><code class="language-js">const express = require(&#39;express&#39;);
const { z } = require(&#39;zod&#39;);

const app = express();

app.use(express.json());

const LoginSchema = z.object({
  // In this example we will only validate the request body.
  body: z.object({
    email: z.string().email(),
    password: z.string().min(6)
  })
});
</code></pre>
<p>Now we are going to create our middleware for Zod validation.</p>
<pre><code class="language-js">// ...

const validate = (schema) =&gt; (req, res, next) =&gt; {
  try {
    schema.parse({
      body: req.body,
      query: req.query,
      params: req.params
    });

    next();
  } catch (err) {
    return res.status(400).send(err.errors);
  }
};

// ...
</code></pre>
<p>Finally, we are going to create a route(<code>/login</code>) for POST requests, which we will use our <code>validate</code> middleware to perform the validation of the request body.</p>
<pre><code class="language-js">// ...

// pass LoginSchema to validate middleware
app.post(&#39;/login&#39;, validate(LoginSchema), (req, res) =&gt; {
  return res.json({ ...req.body });
});

// ...
</code></pre>
<p>The final code would be as follows:</p>
<pre><code class="language-js">const express = require(&#39;express&#39;);
const { z } = require(&#39;zod&#39;);

const app = express();

app.use(express.json());

const LoginSchema = z.object({
  // In this example we will only validate the request body.
  body: z.object({
    // email should be valid
    email: z.string().email(),
    // password should be at least 6 characters
    password: z.string().min(6)
  })
});

const validate = (schema) =&gt; (req, res, next) =&gt; {
  try {
    schema.parse({
      body: req.body,
      query: req.query,
      params: req.params
    });

    next();
  } catch (err) {
    return res.status(400).send(err.errors);
  }
};

app.post(&#39;/login&#39;, validate(LoginSchema), (req, res) =&gt; {
  return res.json({ ...req.body });
});

app.listen(8080, () =&gt; console.log(`&gt; Ready on http://localhost:${8080}`));
</code></pre>
<h3>Final thoughts</h3>
<p>Schema validation is a critical part of any software development process, ensuring data integrity and consistency.</p>
<p>Zod provides a simple and powerful solution for schema validation in TypeScript projects. With its intuitive syntax, built-in validation rules, and support for custom validation, Zod makes it easy to define and validate data structures.</p>
<p>When using Zod for schema validation, developers can reduce errors, improve code quality, and build more robust applications</p>
<p>In this guide, We learned how to validate our Express.js REST API Calls using Zod.</p>
<p>I hope this article helped you understanding how schema validation works. See yaa!</p>
]]></content>
        <author>
            <name>Kain Nhantumbo</name>
            <email>nhantumbok@gmail.com</email>
            <uri>https://codenut-dev.vercel.app</uri>
        </author>
        <category label="Security"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Discover The Features of The New Next 14]]></title>
        <id>https://codenut-dev.vercel.app/blog/post/discover-the-features-of-next14</id>
        <link href="https://codenut-dev.vercel.app/blog/post/discover-the-features-of-next14"/>
        <updated>2023-11-05T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>Let&#39;s  wrap up for the latest version of Next.js that brings several new features and improvements to the framework that most of us love</p>
]]></summary>
        <content type="html"><![CDATA[<p>While many of us are still in the process of exploring the now old Next.js 13 and now Vercel striked again with the new version of its beloved React.js framework. The new Next.js 14 brings some game-changing features, whether you’re already a Next.js enthusiast or just getting started.</p>
<p>Additionally, be aware of some breacking changes, including the minimum Node.js version being raised to 18.17 and a few API modifications, so is good to stay up-to-date with the latest changes to get the most of Next.js.</p>
<h2>The Highlights</h2>
<p>Now, you can expect a 53% faster on local server startup, remarkable 94% faster code update with Fast Refresh and Turbopack is expected to move to “stable” in an upcoming minor release. Additionally, you don’t have to change a single line of code in your existing Next.js project to reap these new performance benefits.</p>
<p>It’s the kind of upgrade that we all were wondering for.</p>
<h3>Server Actions: Simplify Data Mutations</h3>
<p>The need to create a dedicated API routes for server-side code is changing with Next.js 14. he introduction of Server Actions into stable release status is a big upgrade.</p>
<p>You can now write server-side code securely with a function defined inside your React component. It simplifies your code and provides better user experience by reducing the number of network roundtrips needed for data mutations and page re-rendering.</p>
<p>Take this demo example:</p>
<pre><code class="language-tsx">export default function Page() {
  async function create(formData: FormData) {
    &#39;use server&#39;;
    const fooId = await createFoo(formData);
  }

  return (
    &lt;form action={create}&gt;
      &lt;input type=&#39;text&#39; name=&#39;name&#39; /&gt;
      &lt;button type=&#39;submit&#39;&gt;Submit&lt;/button&gt;
    &lt;/form&gt;
  );
}
</code></pre>
<h3>The new <code>Metadata</code> object</h3>
<p>Metadata options for meta tags have been enhanced to improve the initial rendering performance and reduce layout shift.</p>
<h3>Partial Prerendering</h3>
<p>Next.js 14 brings you the best of both sides of SSR and SSG with the new Partial Prerendering lineup.</p>
<p>It provides a fast initial static response while streaming dynamic content based on your React Suspense boundaries so you get the performance of static sites and the dynamism of server-rendered applications.</p>
<p>There are no new APIs to learn. It’s a smart move that simplifies your development experience.</p>
<h2>Summary</h2>
<ul>
<li><p>Turbopack improved local development performance: 53% faster local server startup, and 94% faster code updates with Fast Refresh;</p>
</li>
<li><p>Metadata improvements ensure that important metadata are sent with initial page content, preventing page undesired layout shift;</p>
</li>
<li><p>Server Actions allow execution of server-side code without the need for a dedicated API route;</p>
</li>
<li><p>Partial Prerendering provides a fast initial static response while streaming dynamic content based on React Suspense boundaries.</p>
</li>
</ul>
<h2>Next.js free course</h2>
<p>Next.js 14 brings a new free course on Next.js Learn. Whether you’re new to Next.js or a seasoned pro, this course has something new for you.</p>
<p>From the basics to advanced features like Partial Prerendering, it’s a comprehensive resource to level up your Next.js skills. This will simplify the learning proccess for many of us.</p>
<p>Thanks for reading!</p>
]]></content>
        <author>
            <name>Kain Nhantumbo</name>
            <email>nhantumbok@gmail.com</email>
            <uri>https://codenut-dev.vercel.app</uri>
        </author>
        <category label="Web Development"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Combine Styled Components with CSS Modules to Unleash Power]]></title>
        <id>https://codenut-dev.vercel.app/blog/post/combine-styled-components-with-css-modules-to-unleash-power</id>
        <link href="https://codenut-dev.vercel.app/blog/post/combine-styled-components-with-css-modules-to-unleash-power"/>
        <updated>2023-10-07T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>Styled components and CSS modules offer powerful features for managing and scaling CSS in modern web applications so  you can create a robust and maintainable CSS architecture that is both flexible and efficient. Get ready to learn more about them togheter.</p>
]]></summary>
        <content type="html"><![CDATA[<p>I am pretty confident that styled components and CSS modules are two powerful tools for managing and scaling CSS in modern web applications, since I have been using them in my personal projects. In this follow-up, we will explore some advanced techniques and best practices for using styled components and CSS modules to create a robust and maintainable CSS architecture.</p>
<p>Let&#39;s dive in already.</p>
<h2>Theming with Styled Components</h2>
<p>One of the most powerful features of styled components is the feature that let us create a theme for the entire application with a few lines of code. This allows you to maintain a consistent design and make global changes easily. To use theming, you’ll need to wrap your application in a ThemeProvider component from the styled-components library and pass your theme object as a prop:</p>
<pre><code class="language-jsx">import { ThemeProvider } from &#39;styled-components&#39;;

const theme = {
  primaryColor: &#39;orange&#39;,
  secondaryColor: &#39;yellow&#39;
  // ...some other theme properties
};

const App = () =&gt; (
  &lt;ThemeProvider theme={theme}&gt;
    {/* Your application components */}
  &lt;/ThemeProvider&gt;
);
</code></pre>
<p>Now, you can access your theme properties in your styled components by using the props theme object like this:</p>
<pre><code class="language-jsx">const Button = styled.button`
  color: white;
  background-color: ${(props) =&gt; props.theme.secondaryColor};
  // ...some other styles
`;
</code></pre>
<p>This allows you to maintain a consistent design system throughout your application and make global changes easily.</p>
<h2>Combining both Styled Components and CSS Modules</h2>
<p>Styled components and CSS modules each have their own unique advantages, you can also combine them for even more powerful and flexible styling. For example, you can use CSS modules for the base styles of your components and styled components for dynamic styles based on props or themes:</p>
<pre><code class="language-css">/* Button.module.css */
.button {
  padding: 10px 20px;
  border: none;
  border-radius: 5px;
  cursor: pointer;
}
</code></pre>
<pre><code class="language-jsx">// CustomButton.jsx
import styles from &#39;./Button.module.css&#39;;

const Button = styled.button`
  color: white;
  background-color: ${(props) =&gt;
    props.primary ? props.theme.primaryColor : props.theme.secondaryColor};

  &amp;:hover {
    background-color: ${(props) =&gt; (props.primary ? &#39;darkblue&#39; : &#39;darkred&#39;)};
  }
`;

const CustomButton = (props) =&gt; (
  &lt;Button className={styles.button}&gt;{props.buttonText}&lt;/Button&gt;
);
</code></pre>
<p>Whith this combination, you can leverage the strengths of both styled components and CSS modules, creating a more maintainable and scalable CSS architecture.</p>
<h2>Best Practices for Styled Components and CSS Modules</h2>
<p>To get the most of styled components and CSS modules powers, we should consider the following best practices:</p>
<ul>
<li><p>Consistent naming conventions: Use a consistent naming convention for your styled components and CSS modules, such as PascalCase for styled components and camelCase for CSS modules.</p>
</li>
<li><p>Organize your components: Organize your components and their styles in a logical folder structure, making it easier to find and maintain your code.</p>
</li>
<li><p>Use linters and format your code: Use tools such as ESLint and Prettier to maintain consistent code style and enforce best practices across your project.</p>
</li>
<li><p>Separate styles from components: Keep your styles separate from your component logic by creating a separate file for each styled component or CSS module.</p>
</li>
<li><p>Optimize your components for performance: Be mindful of performance when using styled components and CSS modules. Avoid unnecessary re-renders and excessive use of props or theme variables, which lead to performance issues.</p>
</li>
</ul>
<p>When you follow the best practices, you can ensure that your CSS codebase remains performant, maintainable, scalable and easy to understand.</p>
<p>Thanks for reading!</p>
]]></content>
        <author>
            <name>Kain Nhantumbo</name>
            <email>nhantumbok@gmail.com</email>
            <uri>https://codenut-dev.vercel.app</uri>
        </author>
        <category label="Styling"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Get the Most Out of Your React Apps by Learning These Performance Techniques]]></title>
        <id>https://codenut-dev.vercel.app/blog/post/get-the-most-out-of-your-react-apps-by-learning-these-performance-techniques</id>
        <link href="https://codenut-dev.vercel.app/blog/post/get-the-most-out-of-your-react-apps-by-learning-these-performance-techniques"/>
        <updated>2023-06-30T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>Take your skills to the next level and optimize your React applications by using these performance tips</p>
]]></summary>
        <content type="html"><![CDATA[<p>In this article, I’ll share with you some performance tips that will supercharge your React development. Now get ready to optimize and make your apps blazing-fast. Okay, let’s dive in!</p>
<p><strong>1. Use Functional Components and React Hooks.</strong><br>We all know functional components with React Hooks offer better performance compared to the old class components.</p>
<p>They are lighter and don’t carry the overhead of managing instance properties, avoiding unnecessary re-renders and boost your app’s performance.</p>
<p><strong>2. Use <code>useMemo</code> to Memoize Expensive Computations in your Components.</strong><br>If you have expensive computations or complex data manipulation in your components, you can optimize them with the <code>useMemo</code> hook.</p>
<p>It memoizes the result of the computation, preventing unnecessary re-calculations.</p>
<p>With this hook, you ensure that the expensive computation is only performed when the dependencies change.</p>
<p><strong>3. Optimize your CSS and Layout Render Performance.</strong><br>Consider using CSS-in-JS libraries like styled-components or emotion that generate optimized CSS.</p>
<p>Minimize the use of inline styles and prefer external stylesheets for better caching and performance.</p>
<p>Also, be aware of any undesired re-renders caused by frequently changing styles.</p>
<p><strong>4. Use <em>Code Splitting</em> and <em>Lazy Loading</em>.</strong><br>Leverage code splitting and lazy loading to load only the necessary code when it’s needed, reducing the initial bundle size and improving loading speed.</p>
<p><code>React</code> provides the <code>React.lazy</code> function for dynamically loading your components. In the end, your app loads faster, improving the overall performance.</p>
<p><strong>5. Optimize Re-rendering with <code>React.memo</code>.</strong><br>Use <code>React.memo</code> to memoize functional components and prevent unnecessary re-renders. The component will only re-render if its props change, preventing unnecessary updates.</p>
<p><strong>6. Use Profile Tools and Analyze Performance.</strong><br>Make a good use and take advantage by using performance profiling tools like <strong>React DevTools Profiler</strong> or <strong>Chrome DevTools</strong> Performance tab to identify performance bottlenecks.</p>
<p>Analyze render times, component lifecycles and expensive operations to optimize your application performance.</p>
<blockquote>
<p>That&#39;s it for now, I hope you use these performance tips to level up your next React projects and help you build high-performing, responsive, lightning-fast and user-friendly applications.</p>
</blockquote>
<p>Thanks for readind and... Happy coding!</p>
]]></content>
        <author>
            <name>Kain Nhantumbo</name>
            <email>nhantumbok@gmail.com</email>
            <uri>https://codenut-dev.vercel.app</uri>
        </author>
        <category label="Front-end"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Optimize SEO in your Next.js Applications]]></title>
        <id>https://codenut-dev.vercel.app/blog/post/optimize-seo-in-nextjs-applicatons</id>
        <link href="https://codenut-dev.vercel.app/blog/post/optimize-seo-in-nextjs-applicatons"/>
        <updated>2023-04-12T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>Search engine optimization (SEO) makes a crucial role in driving organic traffic to websites. Next.js provides tools for building performant and SEO-friendly web applications. In this blog post, we will explore some techniques for optimizing SEO in Next.js Apps to enhance search engine visibility and attract more organic traffic.</p>
]]></summary>
        <content type="html"><![CDATA[<p>Optimizing SEO in Next.js requires a combination of technical implementation, content optimization, and ongoing monitoring. By leveraging advanced techniques, such as dynamic meta tags, SSR, structured data markup, and performance optimization, you can significantly improve search engine visibility and attract more organic traffic to your Next.js applications.</p>
<h2>Understanding SEO Basics</h2>
<p>Before diving into techniques, let’s quickly review some essential SEO principles. Meta tags, structured data markup, URL structure, and sitemaps are crucial for search engines to understand and rank our web pages.</p>
<h2>Next.js and SEO - A Poweful Combination</h2>
<p>Next.js is an excellent choice out there for building SEO-friendly applications due to its server-side rendering (SSR) capabilities, which provide search engines with fully-rendered HTML content. Additionally, Next.js comes with built-in optimizations, such as automatic code splitting and prefetching, that contribute to better SEO performance.</p>
<h2>SEO in Next.js</h2>
<h3>Meta Tags and Title Optimization</h3>
<p>Next.js allows dynamic generation of meta tags and titles for each page by using the <code>next/head</code> component. You can customize these tags based on the page’s content dynamically.</p>
<p>Let&#39;s take an example of how to set dynamic meta tags and titles:</p>
<pre><code class="language-jsx">import Head from &#39;next/head&#39;;

function Page() {
  return (
    &lt;&gt;
      &lt;Head&gt;
        &lt;title&gt;My Page | Next.js SEO&lt;/title&gt;
        &lt;meta
          name=&#39;description&#39;
          content=&#39;This is the meta description for My Page&#39;
        /&gt;
        {/* other additional meta tags */}
      &lt;/Head&gt;

      {/* page content */}
    &lt;/&gt;
  );
}

export default Page;
</code></pre>
<h3>Sitemap Generation</h3>
<p>A sitemap helps search engines discover and index your web pages more efficiently. Next.js provides a way to generate a sitemap using the sitemap package. Check out the Next.js documentation on sitemap generation for detailed instructions.</p>
<h3>URL Structure and Canonical URLs</h3>
<p>Next.js generates clean URLs by default based on the page structure. You can further optimize URLs by customizing them to include relevant keywords. Additionally, you should set canonical URLs to avoid duplicate content issues. The Next.js documentation on dynamic routes can help you structure your URLs effectively.</p>
<h3>Optimizing Images</h3>
<p>Images can significantly impact SEO. Next.js provides built-in image optimization capabilities. You can optimize images by specifying attributes such as alt text, dimensions, and file size. Check out the Next.js documentation on image optimization for detailed instructions.</p>
<h3>Responsive and Mobile-Friendly Design</h3>
<p>Having a responsive and mobile-friendly design is crucial for SEO. Next.js, being a React framework, encourages building responsive layouts using CSS frameworks like Tailwind CSS or responsive design principles with CSS media queries.</p>
<h3>Structured Data Markup</h3>
<p>Structured data helps search engines understand the context of your content. Next.js allows you to add structured data using the next-seo package. Refer to the Next.js documentation on structured data with next-seo.</p>
<h3>Handling Pagination for SEO</h3>
<p>If your application implements pagination, it’s essential to handle it properly for SEO. Next.js provides support for pagination using the next/link component and the rel=”next/prev” attribute. The use of rel=”next/prev” attribute to signal to search engines the relationship between paginated pages helps them to understand the pagination structure.</p>
<h3>Server-Side Rendering (SSR) for SEO</h3>
<p>Next.js’s server-side rendering (SSR) capabilities provide search engines with fully-rendered HTML content, improving SEO visibility. By using the getServerSideProps function, you can fetch data during the server-side rendering process and pass it as props to your pages. This ensures search engines see the complete content of your pages. Here’s an example:</p>
<pre><code class="language-jsx">export async function getServerSideProps(context) {
  // Fetch data from an external API
  const response = await fetch(&#39;https://api.example.com/data&#39;);
  const data = await response.json();
  return {
    props: { data }
  };
}
</code></pre>
<h2>Best Pratices Considerations for Next.js</h2>
<h3>Managing 404 Errors and Custom Error Pages</h3>
<p>Properly handle 404 errors by creating custom error pages that provide helpful information to users and search engines. Next.js allows you to create custom 404 error pages by creating a pages/404.js file.</p>
<h3>Optimizing HTML and CSS</h3>
<p>Minify HTML and CSS files to reduce their sizes. Remove unnecessary code, comments, and whitespace to optimize loading times. Additionally, leverage Next.js’s support for CSS frameworks like Tailwind CSS to streamline CSS delivery.</p>
<h3>Page Load Times</h3>
<p>Improve page load times by leveraging Next.js’s built-in optimizations, such as automatic code splitting and prefetching. Additionally, optimize asset sizes, leverage browser caching, and use CDNs to deliver content efficiently.</p>
<h3>Lazy Loading and Code Splitting</h3>
<p>Lazy load and code split your Next.js application to load only the necessary components and assets when required. This reduces initial load times and improves the user experience</p>
<h3>Properly Handling of Redirects</h3>
<p>Implement proper redirects, such as 301 (permanent) and 302 (temporary) redirects, to avoid broken links and maintain link equity. You can handle redirects in Next.js using server-side logic or frameworks like next-routes.</p>
<h3>Managing Duplicate Content and Canonicalization</h3>
<p>Duplicate content can harm your SEO rankings. Implement canonical tags in your Next.js application to specify the preferred version of a web page when duplicate content exists.</p>
<h2>Monitoring and Analyzing SEO Performance</h2>
<h3>Making Integration with Google Analytics</h3>
<p>Integrate Google Analytics into your Next.js application to track and analyze traffic, user behavior, and conversion rates. The Next.js documentation provides a guide on integrating Google Analytics.</p>
<h3>Utilizing Google Search Console for Insights</h3>
<p>Google Search Console provides valuable insights into your website’s organic performance, including search queries, click-through rates, and crawl errors. Verify your Next.js website with Google Search Console and leverage its data for SEO improvements.</p>
<h3>Monitoring SERP Rankings and Click-Through Rates (CTR)</h3>
<p>Track your website’s rankings in search engine results pages (SERPs) and monitor the click-through rates (CTR) using SEO tools like SEMrush, Ahrefs, or Moz. Analyzing these metrics can help you identify areas for optimization.</p>
<h2>Conclusion</h2>
<p>Remember to regularly review and update your SEO strategies as search engine algorithms and best practices evolve. By staying informed, implementing advanced techniques, and consistently monitoring performance, you can maintain a strong SEO presence for your Next.js applications and drive sustainable organic traffic.</p>
<p>This article is not only for you, but for me too! Good things come in our learning journey, so dont&#39;t stop learning. See yaa!</p>
<p>And... Thanks for reading!</p>
]]></content>
        <author>
            <name>Kain Nhantumbo</name>
            <email>nhantumbok@gmail.com</email>
            <uri>https://codenut-dev.vercel.app</uri>
        </author>
        <category label="SEO"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Learn More About Next.js: SSR, SSG, ISR, Server Components and more]]></title>
        <id>https://codenut-dev.vercel.app/blog/post/learn-more-about-nextjs-ssr,-ssg,-isr,-server-components-and-more</id>
        <link href="https://codenut-dev.vercel.app/blog/post/learn-more-about-nextjs-ssr,-ssg,-isr,-server-components-and-more"/>
        <updated>2023-02-19T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>In this era of dynamic world of web development, search engine optimization (SEO) plays a crucial role in ensuring your website’s visibility and success.</p>
]]></summary>
        <content type="html"><![CDATA[<p>In this article, we’ll explore the ins and outs of SEO within React and Next.js, from traditional methods to modern solutions, and discuss the different rendering techniques — SSR, SSG, and ISR.</p>
<h2>Understanding SSR, SSG, and ISR</h2>
<p>Server-Side Rendering (SSR), Static Site Generation (SSG), and Incremental Static Regeneration (ISR) are crucial concepts in optimizing your Next.js app for SEO. Each method determines your speed which greatly affects your SEO ranking and also how you will be retrieving the metadata for each dynamic page (like a blog post or product page).</p>
<p><strong><em>Server-Side Rendering(SSR)</em></strong>: pre-renders pages on the server before sending them to the client side. This approach enhances SEO by providing search engines with fully-rendered HTML content, improving indexability and loading times.</p>
<p><strong><em>Static Site Generation (SSG)</em></strong>: generates HTML pages at build time, reducing server load and ensuring fast page loads. However, it may not be suitable for content that changes frequently.</p>
<p><strong><em>Incremental Static Regeneration (ISR)</em></strong>: combines the best of both worlds by allowing you to revalidate and regenerate specific pages at intervals, keeping content fresh while benefiting from the performance of static content.</p>
<p>Also, is important to say that this approach may lead to stale content between revalidations.</p>
<h3>Consider <code>next-seo</code> for a simple SEO solution</h3>
<p>Use the next-seo and get pretty much off-the-shelf static and simple SEO solutions. The <code>next-seo</code> package simplifies SEO management in Next.js by providing a declarative way to define metadata.</p>
<h3>For more advanced and dynamic use cases</h3>
<p>Just make use of the advanced dynamic calls in Server Components. Server components in Next.js allow dynamic data fetching on the server side, enhancing SEO by providing more content to search engines.</p>
<h3>What about simple React apps without Next.js?</h3>
<blockquote>
<p><strong><em>Use the the old way — Helmet for SEO</em></strong></p>
</blockquote>
<p>In the past, React developers relied on libraries like <code>helmet</code> package to manage SEO-related tags such as meta descriptions and titles.</p>
<h3>Conclusion</h3>
<p>Optimizing SEO in React and Next.js involves a careful balance between rendering methods. By understanding the differences between SSR, SSG, and ISR, leveraging tools like next-seo, and harnessing the power of server components, you can ensure your website ranks high in search engine results while providing an exceptional user experience.</p>
<p>I hope this article helped you. See yaa!</p>
]]></content>
        <author>
            <name>Kain Nhantumbo</name>
            <email>nhantumbok@gmail.com</email>
            <uri>https://codenut-dev.vercel.app</uri>
        </author>
        <category label="SEO"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[How to Generate Random Colors in Javascript]]></title>
        <id>https://codenut-dev.vercel.app/blog/post/how-to-generate-colors-in-javascript</id>
        <link href="https://codenut-dev.vercel.app/blog/post/how-to-generate-colors-in-javascript"/>
        <updated>2022-09-20T12:10:18.366Z</updated>
        <summary type="html"><![CDATA[<p>Learn how to generate colors in javascript programatically</p>
]]></summary>
        <content type="html"><![CDATA[<p>In this post, I will write a  quick guide to build a simple hexadecimal color generator with javascript, so you can use it in your projects.</p>
<p>Without much, let&#39;s begin.</p>
<h3>Generating the colors</h3>
<p>First, we have to create an array of hexadecimal caracters like this:</p>
<pre><code class="language-js">const charactersArray = [0,1,2,3,4,5,6,7,8,9,&quot;A&quot;,&quot;B&quot;,&quot;C&quot;,&quot;D&quot;,&quot;E&quot;,&quot;F&quot;]
</code></pre>
<p>Putting those characters in an array will simplify the process, thats why I have picked an array to allow us to select any item by providing its index.</p>
<p>Then, let&#39;s create a function to select items from the array we created:</p>
<pre><code class="language-js">// function that takes a index and returns an integer.
function getHexCharacter(index) {
  return charactersArray[index];
}
</code></pre>
<p>The function above will take the index and return the hexademical-character stored in that place. Next, we need to represent colors using the returned value.</p>
<pre><code class="language-js">function generateColor() {
  const hexColorCode = &#39;#&#39;; // initial hex color code

  // iterate over the 6 possible aditional characters for the color code
  for (const i = 0; i &lt; 6; i++) {
    const randomIndex = Math.floor(Math.random() * charactersArray.length);
    hexColorCode += getHexCharacter(randomIndex);
  }
  return hexColorCode;
}
</code></pre>
<p>The above function, loops 6 times because hexadecimal colors are represented by 6 hexadecimal digits. Within the loop, the function calls <code>getHexCharacter()</code> to generate a hexadecimal digit for each index of the color code. </p>
<p>The function <code>getHexCharacter()</code> takes the <code>randomIndex</code> generated from the array of characters we have created before as parameter to ensure that we not have te same generated calor code values. Once all digits of the color code have been generated, the function <code>generateColor()</code>  returns the complete hexadecimal color code represented as a string.</p>
<p>That&#39;s it. I hope you could learn something new today.
Thank you for reading! </p>
]]></content>
        <author>
            <name>Kain Nhantumbo</name>
            <email>nhantumbok@gmail.com</email>
            <uri>https://codenut-dev.vercel.app</uri>
        </author>
        <category label="Javascript"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Why Semantic Markup is Significant for Your Website Optimization]]></title>
        <id>https://codenut-dev.vercel.app/blog/post/why-semantic-markup-is-significant-for-Your-website-optimization</id>
        <link href="https://codenut-dev.vercel.app/blog/post/why-semantic-markup-is-significant-for-Your-website-optimization"/>
        <updated>2022-09-11T12:10:18.366Z</updated>
        <summary type="html"><![CDATA[<p>We should discuss why semantic markup (HTML) is significant for your sites Search engine optimization, and that it is so easy to get this pivotal Website design enhancement component right, even as a non-geek.</p>
]]></summary>
        <content type="html"><![CDATA[<p>The vast majority have caught wind of Website design enhancement (Site improvement) and realize that it&#39;s something that your site should be found by means of the Web crawler Results Pages (SERPs). On the off chance that you know somewhat more than that you might know that &quot;catchphrases&quot; are one of the main components of Website optimization. You&#39;ll comprehend the reason why semantic markup is so significant for your catchphrases in a second.</p>
<p>What loads of site proprietors have close to zero insight into Web optimization, is that the HTML components that your site is organized (increased) with will straightforwardly impact the web crawlers (Google, Bing, Yippee) capacity to output, record, and find out about how applicable your site is to the end-client (the people who look for things).</p>
<p>HTML (Hypertext Markup Language) has many inherent labels that web engineers use to make components on a page. A component comprises of:</p>
<ul>
<li>An opening HTML tag;</li>
<li>Content;</li>
<li>A closing HTML tag.</li>
</ul>
<p>The opening and shutting HTML labels fold over your substance and characterize a HTML component.</p>
<p>So a HTML component is: (opening tag) - content - (closing tag).</p>
<p>Content can be things like titles, sections, records, joins, buttons, pictures, buttons, and significantly more. Here is an illustration of a passage component:</p>
<p>The very text you&#39;re perusing right presently is a section component. It sits inside an initial passage tag <code>&lt;p&gt;</code> and an end section tag <code>&lt;/p&gt;</code>.</p>
<p>To affirm that the assertion above is valid, just right snap straightforwardly on the passage (or some other block of message in this article) and snap Examine.</p>
<p>To utilize Semantic markup essentially implies that you utilize the proper underlying HTML labels to fold over your substance so they address your substance best.</p>
<p>As an example, this tutorial you’re reading has a title called &quot;Why Semantic Markup is Significant for Your Web optimization&quot;. The title is wrapped by an opening and shutting <code>&lt;h1&gt;</code> tag (check for yourself). H1 labels are utilized to characterize the greatest text on a page, for example, titles or article titles.</p>
<p>The Web search tool artificial intelligence (bots) are wired to search for pertinent examples that propose that your specific article or item page is applicable to their searchers. The title is one of the main signs since it&#39;s the single greatest starter (or super short synopsis) for your substance that you use to convince searchers to tap on the connection to consume your substance.</p>
<h2>What isn&#39;t semantic markup?</h2>
<p>I&#39;ll clarify this with an outrageous example for drive the point across quick. The HTML language has a tag for characterizing button components named <code>&lt;button&gt;</code>, for example:</p>
<pre><code class="language-html">&lt;button&gt;Like and Subscribe&lt;/button&gt;
</code></pre>
<p>The above results in an un-styled button, yet it utilizes right semantic markup.</p>
<p>In any case, suppose that I need to be amusing, and on second thought wrap the substance above (Like and Subscribe) inside section labels <code>&lt;p&gt;</code>Like and Subscribe<code>&lt;/p&gt;</code>.</p>
<p>In addition to the fact that it be semantically would wrong, yet it likewise wouldn&#39;t work actually, in light of the fact that section components are not interactive in the browser.</p>
<h2>Unsemanic markup</h2>
<p>There are a couple of ways you can markup your substance un-semantically, that won&#39;t destroy your site&#39;s specialized elements, in contrast to the earlier model.</p>
<p>Suppose you wrap your article&#39;s title inside section labels rather than the suitable H1 tag. This is semantically wrong since well, a title isn&#39;t a passage. Be that as it may, in fact it won&#39;t seriously hurt your site. Guests can in any case peruse the text.</p>
<p>You can contend that visual styling is a specialized component of your site, and all things considered, enclosing a title by a section label will to some degree hurt your site in fact, as in your title will have a more modest text dimension and textual style weight than it ought to (on the grounds that passage is dependably more modest than headings).</p>
<h2>Conventional and unsemanic markup</h2>
<p>You could likewise wrap a section inside one of HTML&#39;s conventional HTML labels for example the exemplary <code>&lt;div&gt;</code> tag. Utilizing a <code>&lt;div&gt;</code> to fold over a passage or title, or other text, would be semantically wrong, however it will not obliterate your site&#39;s specialized highlights. Your site will in any case work, yet very much like with the heading/section model over, it will play with your typography (text organizing).</p>
<p>Involving some unacceptable markup for your substance is an incredible method for letting web search tools like Google realize that you don&#39;t have the foggiest idea what in the world you&#39;re doing, and this will straightforwardly hurt your capacity to rank high on the query items pages (SERPs).</p>
<p>SEO-friendly HTML markup is simple, here’s a quick checklist:</p>
<ul>
<li>Headlines should be defined with <code>&lt;h1&gt;</code> tags — only one per page.</li>
<li>Subheadlines should be define with <code>&lt;h2&gt;</code>, <code>&lt;h3&gt;</code>, or <code>&lt;h4&gt;</code> tags. You can also use <code>&lt;h5&gt;</code> and <code>&lt;h6&gt;</code> but I generally recommend against going overboard with heading tags (it won’t give you more SEO).</li>
<li>Paragraphs should be defined with <code>&lt;p&gt;</code></li>
<li>Lists should be defined with <code>&lt;ul&gt;</code></li>
<li>List items should be defined with <code>&lt;li&gt;</code> and always sit inside <code>&lt;ul&gt;</code> tags.</li>
</ul>
<p>Remember that to use Semantic markup simply means that you are using the appropriate built-in HTML tags to wrap around your content so that they represent your content best.</p>
]]></content>
        <author>
            <name>Kain Nhantumbo</name>
            <email>nhantumbok@gmail.com</email>
            <uri>https://codenut-dev.vercel.app</uri>
        </author>
        <category label="SEO"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[How to Make Pre Tags Responsive in CSS]]></title>
        <id>https://codenut-dev.vercel.app/blog/post/how-to-make-pre-tags-responsive-in-css</id>
        <link href="https://codenut-dev.vercel.app/blog/post/how-to-make-pre-tags-responsive-in-css"/>
        <updated>2022-09-10T15:10:18.366Z</updated>
        <summary type="html"><![CDATA[<p>Learn how to make your HTML pre tags responsive by adding a couple of CSS properties</p>
]]></summary>
        <content type="html"><![CDATA[<p>When I was building this site, I had a hard time styling the <code>pre</code> tags. That problem lead long code snippets (which are wrapped by <code>pre</code> tags) to overflow the width of the page, and cause the page layout to break. So I decided to share the solution I found and that worked for me.</p>
<p>I found that happens because by default <code>pre</code> tags have the CSS <code>white-space</code> property set to <code>normal</code>, like this:</p>
<pre><code class="language-css">pre {
    white-space: normal;
}
</code></pre>
<p>To fix the issue you simple change <code>normal</code> property to <code>pre-wrap</code>:</p>
<pre><code class="language-css">pre {
    white-space: pre-wrap;
}
</code></pre>
<p>This will improve the appearance, but doesn’t solve the overflow issue completely, because <code>pre-wrap</code> only addresses whole lines of code (a collection of code terms on a line, separated by white space).</p>
<p>What happens if individual words in your code lines are so long that they go beyond the width of your page?</p>
<p>Then your layout still breaks, because <code>pre-wrap</code> doesn’t address individual words.</p>
<p>To fix this issue, we need to add another CSS properties to the <code>pre</code> tag, called <code>word-break</code> then assign a value of <code>break-all</code> and <code>word-wrap</code> property then assign a value of <code>break-word</code>. Like this:</p>
<pre><code class="language-css">pre {
    white-space: pre-wrap;
    word-break: break-all;
  word-wrap: break-word;
}
</code></pre>
<p>Now your <code>pre</code> tags should be responsive. I hope this article helped you.</p>
]]></content>
        <author>
            <name>Kain Nhantumbo</name>
            <email>nhantumbok@gmail.com</email>
            <uri>https://codenut-dev.vercel.app</uri>
        </author>
        <category label="CSS"/>
    </entry>
</feed>